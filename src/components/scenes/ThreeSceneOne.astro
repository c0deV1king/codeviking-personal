<div id="rocket-explorer" class="w-full h-full"></div>

<script>
  // @ts-ignore
  import * as THREE from "three";
  // @ts-ignore
  import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("rocket-explorer");
    if (!container) {
      console.error("Three.js container not found");
      return;
    }

    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      90,
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );
    camera.position.set(0, 12, 15);
    camera.lookAt(0, 0, 0);

    const renderer = new THREE.WebGLRenderer({ alpha: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setClearColor(0x000000, 0);
    container.appendChild(renderer.domElement);

    // Lighting
    scene.add(new THREE.AmbientLight(0xffffff, 1));
    const pointLight = new THREE.PointLight(0xffffff, 1, 0);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Model loading
    let modelGroup: THREE.Group;
    const wireframeMaterial = new THREE.MeshBasicMaterial({
      color: 0x991b1b,
      emissive: 0x330000,
      wireframe: true,
    });

    const solidMaterial = new THREE.MeshBasicMaterial({
      color: 0xf2f2f2,
      opacity: 0.5,
      transparent: true,
    });

    // @ts-ignore
    new GLTFLoader().load("/models/rocketship.glb", (gltf: any) => {
      let model: THREE.Group;
      model = gltf.scene;

      const solidModel = model.clone();

      model.traverse((child: THREE.Object3D) => {
        if (child.isMesh) child.material = wireframeMaterial;
      });

      solidModel.traverse((child: THREE.Object3D) => {
        if (child.isMesh) child.material = solidMaterial;
      });

      modelGroup = new THREE.Group();
      modelGroup.add(solidModel);
      modelGroup.add(model);

      scene.add(modelGroup);
    });

    // Animation
    function animate() {
      requestAnimationFrame(animate);
      if (modelGroup) modelGroup.rotation.y += 0.005;
      renderer.render(scene, camera);
    }
    animate();

    // Resize handler
    const handleResize = () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    };
    window.addEventListener("resize", handleResize);
  });
</script>

<style>
  #rocket-explorer {
    width: 100%;
    height: 100%;
  }
</style>
