<div id="steam-tracker-frontend" class="w-full h-full"></div>

<script>
  // @ts-ignore
  import * as THREE from "three";

  // Wait for DOM to be ready
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("steam-tracker-frontend");
    if (!container) {
      console.error("Three.js container not found");
      return;
    }

    // Scene setup
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      110, // fov
      container.clientWidth / container.clientHeight,
      0.1,
      1000,
    );

    camera.position.set(0, 1, 1);
    camera.lookAt(0, 0, 0);

    const renderer = new THREE.WebGLRenderer({ alpha: true });

    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);
    renderer.setClearColor(0x000000, 0); // Transparent background

    // Add a simple cube
    const geometry = new THREE.BoxGeometry();
    // Solid material for the faces
    const solidMaterial = new THREE.MeshBasicMaterial({
      color: 0xf2f2f2,
      transparent: true,
      opacity: 0.0,
    });

    // Wireframe material for the edges
    const wireframeMaterial = new THREE.MeshBasicMaterial({
      color: 0x991b1b,
      wireframe: true,
    });

    // Create two meshes - one solid, one wireframe
    const solidCube = new THREE.Mesh(geometry, solidMaterial);
    const wireframeCube = new THREE.Mesh(geometry, wireframeMaterial);

    const cubeGroup = new THREE.Group();
    cubeGroup.add(solidCube);
    cubeGroup.add(wireframeCube);
    scene.add(cubeGroup);

    const ambientLight = new THREE.AmbientLight(0xffffff, 1);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0xffffff, 1, 0);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);
      cubeGroup.rotation.x += 0.01;
      cubeGroup.rotation.y += 0.01;
      renderer.render(scene, camera);
    }

    animate();

    // Handle resize
    window.addEventListener("resize", () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    });
  });
</script>

<style>
  #steam-tracker-frontend {
    width: 100%;
    height: 100%;
  }
</style>
